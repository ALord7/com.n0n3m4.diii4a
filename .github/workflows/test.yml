# Only for building testing version by Github CI workflow

name: Test

on:
  push:
    branches: [ "master" ]
    paths:
      - 'Q3E/src/main/jni/doom3/neo/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'Q3E/src/main/jni/doom3/neo/**'
      - '.github/workflows/test.yml'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        bits: [ 64, 32 ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc # clang
            cpp_compiler: g++ # clang++
        exclude:
          - os: ubuntu-latest
            bits: 32

    defaults:
      run:
        working-directory: .

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1
          fetch-tags: true

      - name: Set strings
        id: strings
        shell: bash
        run: |
          echo ${{ github.workspace }} ${{ matrix.os }}-${{ matrix.bits }}
          if [ "x${{ matrix.bits }}" = "x32" ]; then echo "arch=86" >> "$GITHUB_OUTPUT"; else echo "arch=64" >> "$GITHUB_OUTPUT"; fi

      - name: Get current date time
        id: current_datetime
        uses: Kaven-Universe/github-action-current-date-time@v1
        with:
          format: "YYYY-MM-DD_HH-mm-ss"

      - name: Install CMake and Ninja
        if: matrix.os == 'windows-latest'
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.25.2"

      - name: Setup vcpkg and install depends
        if: matrix.os == 'windows-latest'
        uses: johnwason/vcpkg-action@v6
        with:
          pkgs: 'SDL2 curl openal-soft zlib'
          triplet: x${{ steps.strings.outputs.arch }}-windows
          token: ${{ secrets.TOKEN }}
          github-binarycache: true

      - name: Configure project with CMake
        if: matrix.os == 'windows-latest'
        run: |
          cmake -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DBUILD_D3_MOD=OFF -DBUILD_Q4=OFF -DBUILD_PREY=OFF -DBUILD_Q4_MOD=OFF CMakeLists.txt

      - name: Build with Ninja
        if: matrix.os == 'windows-latest'
        run: |
          cmake --build . --config Release

      - name: Copy OpenAL32.dll
        if: matrix.os == 'windows-latest'
        run: |
          xcopy /Y/Q ${{ github.workspace }}\vcpkg\packages\openal-soft_x${{ steps.strings.outputs.arch }}-windows\bin\OpenAL32.dll Q3E\src\main\jni\doom3\neo\Release\

      - name: Prepare package
        if: matrix.os == 'windows-latest'
        id: prepare_package
        run: |
          dir Q3E\src\main\jni\doom3\neo\Release
          mkdir Release
          xcopy /Y/Q Q3E\src\main\jni\doom3\neo\Release\*.dll windows_x${{ steps.strings.outputs.arch }}_release\
          xcopy /Y/Q Q3E\src\main\jni\doom3\neo\Release\*.exe windows_x${{ steps.strings.outputs.arch }}_release\
          dir windows_x${{ steps.strings.outputs.arch }}_release

      - name: Package(64)
        if: matrix.os == 'windows-latest'
        uses: vimtor/action-zip@v1.2
        with:
          files: windows_x${{ steps.strings.outputs.arch }}_release/
          dest: idTech4A++-test_windows_x${{ steps.strings.outputs.arch }}_release-${{ steps.current_datetime.outputs.time }}.zip
          recursive: false

      - uses: actions/upload-artifact@v4
        name: Upload Zip artifacts
        with:
          name: "${{ matrix.os }}-${{ matrix.bits }}-release"
          path: "idTech4A++-test_windows_x${{ steps.strings.outputs.arch }}_release-${{ steps.current_datetime.outputs.time }}.zip"
          retention-days: 1

  collect:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/download-artifact@v4
        name: Download all artifacts
        with:
          # path: packages
          merge-multiple: true

      - name: Delete tag and release
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: windows_x64_testing
          delete_release: true
          repo: glKarin/com.n0n3m4.diii4a
          github_token: ${{ secrets.TOKEN }}

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.TOKEN }}"
          automatic_release_tag: "windows_x64_testing"
          prerelease: true
          title: "Windows x64 testing (Non-release. Automatic CI builds)"
          files: |
            idTech4A++-test_windows_x64_release-${{ steps.current_datetime.outputs.time }}.zip
            idTech4A++-test_windows_x86_release-${{ steps.current_datetime.outputs.time }}.zip
