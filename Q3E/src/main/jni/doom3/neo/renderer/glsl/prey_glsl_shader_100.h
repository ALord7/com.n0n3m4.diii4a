// screenprocess
GLSL_SHADER const char SCREENPROCESS_VERT[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"attribute highp vec4 attr_Vertex;\n"
"attribute highp vec4 attr_TexCoord;\n"
"\n"
"uniform highp mat4 u_modelViewProjectionMatrix;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"\n"
"// # texture 0 takes the texture coordinates unmodified\n"
"\n"
"void main(void)\n"
"{\n"
"    gl_Position = u_modelViewProjectionMatrix * attr_Vertex;\n"
"\n"
"    var_TexCoord = attr_TexCoord;\n"
"}\n"
;

GLSL_SHADER const char SCREENPROCESS_FRAG[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform sampler2D u_fragmentMap0;\n"
"uniform highp vec4 u_nonPowerOfTwo;\n"
"uniform highp vec4 u_fragmentParm0;\n"
"uniform highp vec4 u_fragmentParm1;\n"
"uniform highp vec4 u_fragmentParm2;\n"
"uniform highp vec4 u_fragmentParm3;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"\n"
"// # texture 0 is _currentRender\n"
"// # texture 1 is a normal map that we will use to deform texture 0\n"
"\n"
"// # env[0] is the 1.0 to _currentRender conversion\n"
"// # env[1] is the fragment.position to 0.0 - 1.0 conversion\n"
"\n"
"void main(void)\n"
"{\n"
"// # scale by the screen non-power-of-two-adjust\n"
"    vec3 color = texture2D( u_fragmentMap0, var_TexCoord.st * u_nonPowerOfTwo.xy ).rgb;\n"
"    float R0 = dot( color, vec3( 0.3, 0.5, 0.1 ) );\n"
"    color = mix( vec3( R0 ), color, u_fragmentParm0.xyz );\n"
"    color = mix( vec3( u_fragmentParm1.y ), color, u_fragmentParm1.x );\n"
"    color = color * u_fragmentParm2.xyz + u_fragmentParm3.xyz;\n"
"    gl_FragColor = vec4( color, 0.2 );\n"
"}\n"
;

// screeneffect
GLSL_SHADER const char SCREENEFFECT_VERT[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"attribute highp vec4 attr_Vertex;\n"
"attribute highp vec4 attr_TexCoord;\n"
"attribute highp vec4 attr_Color;\n"
"\n"
"uniform highp mat4 u_modelViewProjectionMatrix;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"varying lowp vec4 var_Color;\n"
"\n"
"// # texture 0 takes the texture coordinates unmodified\n"
"\n"
"void main(void)\n"
"{\n"
"    gl_Position = u_modelViewProjectionMatrix * attr_Vertex;\n"
"\n"
"    var_TexCoord = attr_TexCoord;\n"
"    var_Color = attr_Color / 255.0;\n"
"}\n"
;

GLSL_SHADER const char SCREENEFFECT_FRAG[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform sampler2D u_fragmentMap0;\n"
"uniform sampler2D u_fragmentMap2;\n"
"uniform highp vec4 u_nonPowerOfTwo;\n"
"uniform highp vec4 u_fragmentParm0;\n"
"uniform highp vec4 u_fragmentParm1;\n"
"uniform highp vec4 u_fragmentParm2;\n"
"uniform highp vec4 u_fragmentParm3;\n"
"uniform highp vec4 u_fragmentParm4;\n"
"uniform highp vec4 u_fragmentParm5;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"varying lowp vec4 var_Color;\n"
"\n"
"// # texture 0 is _currentRender\n"
"// # texture 1 is a normal map that we will use to deform texture 0\n"
"\n"
"// # env[0] is the 1.0 to _currentRender conversion\n"
"// # env[1] is the fragment.position to 0.0 - 1.0 conversion\n"
"\n"
"void main(void)\n"
"{\n"
"    vec2 sampleOffsets[12];\n"
"    sampleOffsets[0] = vec2( -0.326212, -0.405805 );\n"
"    sampleOffsets[1] = vec2( -0.840144, -0.073580 );\n"
"    sampleOffsets[2] = vec2( -0.695914,  0.457137 );\n"
"    sampleOffsets[3] = vec2( -0.203345,  0.620716 );\n"
"    sampleOffsets[4] = vec2( 0.962340, -0.194983 );\n"
"    sampleOffsets[5] = vec2( 0.473434, -0.480026 );\n"
"    sampleOffsets[6] = vec2( 0.519456,  0.767022 );\n"
"    sampleOffsets[7] = vec2( 0.185461, -0.893124 );\n"
"    sampleOffsets[8] = vec2( 0.507431,  0.064425 );\n"
"    sampleOffsets[9] = vec2( 0.896420,  0.412458 );\n"
"    sampleOffsets[10] = vec2( -0.321940, -0.932615 );\n"
"    sampleOffsets[11] = vec2( -0.791559, -0.597705 ); \n"
"\n"
"    vec2 size = u_fragmentParm0.xy;\n"
"    vec2 strength = u_fragmentParm0.xy;\n"
"\n"
"// # calculate the screen texcoord in the 0.0 to 1.0 range\n"
"// # scale by the screen non-power-of-two-adjust\n"
"    vec2 pos = var_TexCoord.st * u_nonPowerOfTwo.xy;\n"
"\n"
"    vec3 color = vec3( 0.0 );\n"
"\n"
"    for( int i = 0; i < 12; ++i ) {\n"
"        vec2 tc = sampleOffsets[i] * size.x + pos;\n"
"        vec3 c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"        color = c * strength.y + color;\n"
"    }\n"
"\n"
"    vec3 R0 = texture2D( u_fragmentMap0, pos ).rgb;\n"
"\n"
"    color = clamp( u_fragmentParm1.x * color + u_fragmentParm1.y, 0.0, 1.0 );\n"
"\n"
"    color = mix( color, R0, u_fragmentParm0.z );\n"
"\n"
"    float R1 = dot( color, vec3( 0.3, 0.5, 0.1 ) );\n"
"    color = mix( vec3( R1 ), color, u_fragmentParm2.x );\n"
"    color = mix( vec3( u_fragmentParm3.y ), color, u_fragmentParm3.x );\n"
"    R1 = R1 * u_fragmentParm4.a;\n"
"    color = mix( color, u_fragmentParm4.xyz, R1 );\n"
"    color = color * 0.95 + u_fragmentParm5.xyz;\n"
"\n"
"    vec3 R1v3 = texture2D( u_fragmentMap2, var_TexCoord.st ).rgb;\n"
"    color = mix( R0, color, R1v3 );\n"
"\n"
"    gl_FragColor = vec4( color, 1.0 );\n"
"}\n"
;

// radialblur
GLSL_SHADER const char RADIALBLUR_VERT[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"attribute highp vec4 attr_Vertex;\n"
"attribute highp vec4 attr_TexCoord;\n"
"attribute highp vec4 attr_Color;\n"
"\n"
"uniform highp mat4 u_modelViewProjectionMatrix;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"varying lowp vec4 var_Color;\n"
"\n"
"// # texture 0 takes the texture coordinates unmodified\n"
"\n"
"void main(void)\n"
"{\n"
"    gl_Position = u_modelViewProjectionMatrix * attr_Vertex;\n"
"\n"
"    var_TexCoord = attr_TexCoord;\n"
"    var_Color = attr_Color / 255.0;\n"
"}\n"
;

GLSL_SHADER const char RADIALBLUR_FRAG[] =
"#version 100\n"
"//#pragma optimize(off)\n"
"\n"
"precision mediump float;\n"
"\n"
"uniform sampler2D u_fragmentMap0;\n"
"uniform highp vec4 u_nonPowerOfTwo;\n"
"uniform highp vec4 u_fragmentParm0;\n"
"uniform highp vec4 u_fragmentParm1;\n"
"uniform highp vec4 u_fragmentParm2;\n"
"uniform highp vec4 u_fragmentParm3;\n"
"uniform highp vec4 u_fragmentParm4;\n"
"uniform highp vec4 u_fragmentParm5;\n"
"\n"
"varying highp vec4 var_TexCoord;\n"
"varying lowp vec4 var_Color;\n"
"\n"
"// # texture 0 is _currentRender\n"
"// # texture 1 is a normal map that we will use to deform texture 0\n"
"\n"
"// # env[0] is the 1.0 to _currentRender conversion\n"
"// # env[1] is the fragment.position to 0.0 - 1.0 conversion\n"
"\n"
"void main(void)\n"
"{\n"
"    vec2 size = u_fragmentParm0.xy;\n"
"    vec2 strength = u_fragmentParm0.xy;\n"
"\n"
"// # calculate the screen texcoord in the 0.0 to 1.0 range\n"
"// # scale by the screen non-power-of-two-adjust\n"
"    vec2 pos = var_TexCoord.st * u_nonPowerOfTwo.xy;\n"
"\n"
"    vec3 color = vec3( 0.0 );\n"
"\n"
"    vec2 halfTemp = u_nonPowerOfTwo.xy * 0.5;\n"
"    vec2 R1 = pos.xy - halfTemp;\n"
"\n"
"    float displace = 1.0;\n"
"    vec2 tc = R1 * displace + halfTemp;\n"
"    vec3 c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    displace = displace - size.x;\n"
"    tc = R1 * displace + halfTemp;\n"
"    c = texture2D( u_fragmentMap0, tc ).rgb;\n"
"    color = c * strength.y + color;\n"
"\n"
"    vec3 R0 = texture2D( u_fragmentMap0, pos ).rgb;\n"
"\n"
"    color = clamp( u_fragmentParm1.x * color + u_fragmentParm1.y, 0.0, 1.0 );\n"
"\n"
"    color = mix( color, R0, u_fragmentParm0.z );\n"
"\n"
"    float R1F = dot( color, vec3( 0.3, 0.5, 0.1 ) );\n"
"    color = mix( vec3( R1F ), color, u_fragmentParm2.x );\n"
"    color = mix( vec3( u_fragmentParm3.y ), color, u_fragmentParm3.x );\n"
"    R1F = R1F * u_fragmentParm4.a;\n"
"    color = mix( color, u_fragmentParm4.xyz, R1F );\n"
"    color = color * 0.95 + u_fragmentParm5.xyz;\n"
"\n"
"    gl_FragColor = vec4( color, 1.0 );\n"
"}\n"
;

